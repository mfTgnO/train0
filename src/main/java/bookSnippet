2-4. Autowire POJOs with the @Resource and @Inject
Annotations
Problem
You want to use the Java standard @Resource and @Inject annotations to reference POJOs via autowiring,
instead of using the Spring-specific @Autowired annotation.
Solution
JSR-250, or Common Annotations for the Java Platform, defines the @Resource annotation to autowire POJO
references by name. JSR-330, or Standard Annotations for Injection, defines the @Inject annotations to
autowire POJO references by type.
How It Works
The @Autowired annotation described in the previous recipe belongs to the Spring Framework, specifically
to the org.springframework.beans.factory.annotation package. This means it can be used only in the
context of the Spring Framework.
Soon after Spring added support for the @Autowired annotation, the Java language standardized various
annotations to fulfill the same purpose of the @Autowired annotation. These annotations are @Resource,
which belongs to the javax.annotation package, and @Inject, which belongs to the javax.inject package.
Autowire POJOs with the @Resource Annotation
By default, the @Resource annotation works like Spring’s @Autowired annotation and attempts to autowire
by type. For example, the following POJO attribute is decorated with the @Resource annotation, so Spring
attempts to locate a POJO that matches the PrefixGenerator type.
package com.apress.springrecipes.sequence;
import javax.annotation.Resource;
public class SequenceGenerator {
@Resource
private PrefixGenerator prefixGenerator;
...
}ChAPTeR 2 ■ SPRInG CORe TASkS
45
However, unlike the @Autowired annotation, which requires the @Qualifier annotation to autowire a
POJO by name, the @Resource ambiguity is eliminated if more than one POJO type of the same kind exists.
Essentially, the @Resource annotation provides the same functionality as putting together the @Autowired
annotation and the @Qualifier annotation.
Autowire POJOs with the @Inject Annotation
Also, the @Inject annotation attempts to autowire by type, like the @Resource and @Autowired annotations.
For example, the following POJO attribute is decorated with the @Inject annotation, so Spring attempts to
locate a POJO that matches the PrefixGenerator type:
package com.apress.springrecipes.sequence;
import javax.inject.Inject;
public class SequenceGenerator {
@Inject
private PrefixGenerator prefixGenerator;
...
}
But just like the @Resource and @Autowired annotations, a different approach has to be used to match
POJOs by name or avoid ambiguity if more than one POJO type of the same kind exists. The first step to do
autowiring by name with the @Inject annotation is to create a custom annotation to identify both the POJO
injection class and the POJO injection point.
package com.apress.springrecipes.sequence;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.inject.Qualifier;
@Qualifier
@Target({ElementType.TYPE, ElementType.FIELD, ElementType.PARAMETER})
@Documented
@Retention(RetentionPolicy.RUNTIME)
public @interface DatePrefixAnnotation {
}
Notice the custom annotation makes use of the @Qualifier annotation. This annotation is different
from the one used with Spring’s @Qualifier annotation, as this last class belongs to the same Java package
as the @Inject annotation (i.e., javax.inject).ChAPTeR 2 ■ SPRInG CORe TASkS
46
Once the custom annotation is done, it’s necessary to decorate the POJO injection class that generates
the bean instance, which in this case is the DatePrefixGenerator class.
package com.apress.springrecipes.sequence;
...
@DatePrefixAnnotation
public class DatePrefixGenerator implements PrefixGenerator {
...
}
Finally, the POJO attribute or injection point is decorated with the same custom annotation to qualify
the POJO and eliminate any ambiguity.
package com.apress.springrecipes.sequence;
import javax.inject.Inject;
public class SequenceGenerator {
@Inject @DataPrefixAnnotation
private PrefixGenerator prefixGenerator;
...
}
As you’ve seen in recipes 2-3 and 2-4, the three annotations @Autowired, @Resource, and @Inject can
achieve the same result. The @Autowired annotation is a Spring-based solution, whereas the @Resource and
@Inject annotations are Java standard (i.e., JSR) solutions. If you’re going to do name-based autowiring,
the @Resource annotation offers the simplest syntax. For autowiring by class type, all three annotations are
straightforward to use because all three require a single annotation.