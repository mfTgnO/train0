Use Properties File Data to Set Up POJO Instantiation Values
Let’s assume you have a series of values in a properties file you want to access to set up bean properties.
Typically this can be the configuration properties of a database or some other application values composed
of key values. For example, take the following key values stored in a file called discounts.properties:
specialcustomer.discount=0.1
summer.discount=0.15
endofyear.discount=0.2
■ Note To read properties files for the purpose of internationalization (i18n), see the next recipe.
To make the contents of the discounts.properties file accessible to set up other beans, you can use the
@PropertySource annotation to convert the key values into a bean inside a Java config class.
package com.apress.springrecipes.shop.config;
import com.apress.springrecipes.shop.Battery;
import com.apress.springrecipes.shop.Disc;
import com.apress.springrecipes.shop.Product;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
@Configuration
@PropertySource("classpath:discounts.properties")
@ComponentScan("com.apress.springrecipes.shop")
public class ShopConfiguration {
@Value("${endofyear.discount:0}")
private double specialEndofyearDiscountField;ChAPTeR 2 ■ SPRInG CORe TASkS
51
@Bean
public static PropertySourcesPlaceholderConfigurer
propertySourcesPlaceholderConfigurer() {
return new PropertySourcesPlaceholderConfigurer();
}
@Bean
public Product dvdrw() {
Disc p2 = new Disc("DVD-RW", 3.0, specialEndofyearDiscountField);
p2.setCapacity(700);
return p2;
}
}
You define a @PropertySource annotation with a value of classpath:discounts.properties to
decorate the Java config class. The classpath: prefix tells Spring to look for the discounts.properties file
in the Java classpath.
Once you define the @PropertySource annotation to load the properties file, you also need to define a
PropertySourcePlaceholderConfigurer bean with the @Bean annotation. Spring automatically wires the
@PropertySource discounts.properties file so its properties become accessible as bean properties.
Next, you need to define Java variables to take values from the discount discounts.properties file.
To define the Java variable values with these values, you make use of the @Value annotation with a
placeholder expression.
The syntax is @Value("${key:default_value}"). A search is done for the key value in all the loaded
application properties. If a matching key=value is found in the properties file, the corresponding value
is assigned to the bean property. If no matching key=value is found in the loaded application properties,
default_value (i.e., after ${key:) is assigned to the bean property.
Once a Java variable is set with a discount value, you can use it to set up bean instances for a bean’s
discount property.
If you want to use properties file data for a different purpose than setting up bean properties, you should
use Spring’s Resource mechanism, which is described next.