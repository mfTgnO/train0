2-11. Use Spring Environments and Profiles to Load
Different Sets of POJOs
Problem
You want to use the same set of POJO instances or beans but with different instantiation values for different
application scenarios (e.g., production and development and testing).
Solution
Create multiple Java configuration classes and group POJOs instances or beans into each of these classes.
Assign a profile name to the Java configuration class with the @Profile annotation based on the purpose
of the group. Get the environment for an application’s context and set the profile to load a specific group of
POJOs.
How It Works
POJO instantiation values can vary depending on different application scenarios. For example, a common
scenario can occur when an application goes from development to testing and on to production. In each of
these scenarios, the properties for certain beans can vary slightly to accommodate environment changes
(e.g., database username/password, file paths, etc.).
You can create multiple Java configuration classes each with different POJOs (e.g.,
ShopConfigurationGlobal, ShopConfigurationStr, and ShopConfigurationSumWin) and, in the application
context, only load a given configuration class file based on the scenario.
Create a Java Configuration Class with the @Profile Annotation
Let’s create a multiple Java configuration class with an @Profile annotation for the shopping application
presented in previous recipes.
package com.apress.springrecipes.shop.config;
import com.apress.springrecipes.shop.Cashier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
@Configuration
@Profile("global")
@ComponentScan("com.apress.springrecipes.shop")
public class ShopConfigurationGlobal {
@Bean(initMethod = "openFile", destroyMethod = "closeFile")
public Cashier cashier() {
final String path = System.getProperty("java.io.tmpdir") + "cashier";
Cashier c1 = new Cashier();
c1.setFileName("checkout");ChAPTeR 2 ■ SPRInG CORe TASkS
70
c1.setPath(path);
return c1;
}
}
package com.apress.springrecipes.shop.config;
import com.apress.springrecipes.shop.Battery;
import com.apress.springrecipes.shop.Disc;
import com.apress.springrecipes.shop.Product;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
@Configuration
@Profile({"summer", "winter"})
public class ShopConfigurationSumWin {
@Bean
public Product aaa() {
Battery p1 = new Battery();
p1.setName("AAA");
p1.setPrice(2.0);
p1.setRechargeable(true);
return p1;
}
@Bean
public Product cdrw() {
Disc p2 = new Disc("CD-RW", 1.0);
p2.setCapacity(700);
return p2;
}
@Bean
public Product dvdrw() {
Disc p2 = new Disc("DVD-RW", 2.5);
p2.setCapacity(700);
return p2;
}
}
The @Profile annotation decorates the entire Java configuration class, so all the @Bean instances
belong to the same profile. To assign an @Profile name, you just place the name inside "". Notice it’s also
possible to assign multiple @Profile names using a comma-separated value (CSV) syntax surrounded by {}
(e.g., {"summer","winter"}).
Load the Profile into Environment
To load the beans from a certain profile into an application, you need to activate a profile. You can load
multiple profiles at a time, and it’s also possible to load profiles programmatically, through a Java runtime
flag or even as an initialization parameter of a WAR file.ChAPTeR 2 ■ SPRInG CORe TASkS
71
To load profiles programmatically (i.e., via the application context), you get the context environment
from where you can load profiles via the setActiveProfiles() method.
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
context.getEnvironment().setActiveProfiles("global", "winter");
context.scan("com.apress.springrecipes.shop");
context.refresh();
It’s also possible to indicate which Spring profile to load via a Java runtime flag. In this manner, you can
pass the following runtime flag to load all beans that belong to the global and winter profiles:
-Dspring.profiles.active=global,winter
Set a Default Profile
To avoid the possibility of errors because no profiles are loaded into an application, you can define default
profiles. Default profiles are used only when Spring can’t detect any active profiles, which are defined
programmatically, via a Java runtime flag, or with a web application initialization parameter.
To set up default profiles, you can also use any of the three methods to set up active profiles.
Programmatically you use the method setDefaultProfiles() instead of setActiveProfiles(), and via a
Java runtime flag or web application initialization parameter, you can use the spring.profiles.default
parameter instead of spring.profiles.active.