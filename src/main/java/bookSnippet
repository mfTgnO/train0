2-16. Reuse Aspect Pointcut Definitions
Problem
When writing aspects, you can directly embed a pointcut expression in an advice annotation. You want to
use the same pointcut expression in multiple advices without embedding it multiple times.
Solution
You can use the @Pointcut annotation to define a pointcut independently to be reused in multiple advices.
How It Works
In an aspect, a pointcut can be declared as a simple method with the @Pointcut annotation. The method
body of a pointcut is usually empty because it is unreasonable to mix a pointcut definition with application
logic. The access modifier of a pointcut method controls the visibility of this pointcut as well. Other advices
can refer to this pointcut by the method name.
package com.apress.springrecipes.calculator;
...
import org.aspectj.lang.annotation.Pointcut;
@Aspect
@Component
public class CalculatorLoggingAspect {
...
@Pointcut("execution(* *.*(..))")
private void loggingOperation() {}
@Before("loggingOperation()")
public void logBefore(JoinPoint joinPoint) {
...
}
@AfterReturning(
pointcut = "loggingOperation()",
returning = "result")
public void logAfterReturning(JoinPoint joinPoint, Object result) {
...
}
@AfterThrowing(
pointcut = "loggingOperation()",
throwing = "e")
public void logAfterThrowing(JoinPoint joinPoint, IllegalArgumentException e) {
...
}ChAPTeR 2 â–  SPRInG CORe TASkS
86
@Around("loggingOperation()")
public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
...
}
}
Usually, if your pointcuts are shared between multiple aspects, it is better to centralize them in a
common class. In this case, they must be declared as public.
package com.apress.springrecipes.calculator;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
@Aspect
public class CalculatorPointcuts {
@Pointcut("execution(* *.*(..))")
public void loggingOperation() {}
}
When you refer to this pointcut, you have to include the class name as well. If the class is not located in
the same package as the aspect, you have to include the package name also.
package com.apress.springrecipes.calculator;
...
@Aspect
public class CalculatorLoggingAspect {
...
@Before("CalculatorPointcuts.loggingOperation()")
public void logBefore(JoinPoint joinPoint) {
...
}
@AfterReturning(
pointcut = "CalculatorPointcuts.loggingOperation()",
returning = "result")
public void logAfterReturning(JoinPoint joinPoint, Object result) {
...
}
@AfterThrowing(
pointcut = "CalculatorPointcuts.loggingOperation()",
throwing = "e")
public void logAfterThrowing(JoinPoint joinPoint, IllegalArgumentException e) {
...
}
@Around("CalculatorPointcuts.loggingOperation()")
public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
...
}
}