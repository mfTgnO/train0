Spring MVC
MVC is one of the most important modules of the Spring Framework. It builds on the powerful Spring IoC
container and makes extensive use of the container features to simplify its configuration.
Model-View-Controller (MVC) is a common design pattern in UI design. It decouples business logic
from UIs by separating the roles of model, view, and controller in an application. Models are responsible for
encapsulating application data for views to present. Views should only present this data, without including any
business logic. Controllers are responsible for receiving requests from users and invoking back-end services for
business processing. After processing, back-end services may return some data for views to present. Controllers
collect this data and prepare models for views to present. The core idea of the MVC pattern is to separate
business logic from UIs to allow them to change independently without affecting each other.
In a Spring MVC application, models usually consist of domain objects that are processed by the service
layer and persisted by the persistence layer. Views are usually JSP templates written with the Java Standard
Tag Library (JSTL). However, it’s also possible to define views as PDF files, Excel files, RESTful web services,
or even Flex interfaces, the last of which are often dubbed rich Internet applications (RIAs).
Upon finishing this chapter, you will be able to develop Java web applications using Spring MVC.
You will also understand Spring MVC’s common controller and view types, including what has become
the de facto use of annotations for creating controllers since the release of Spring 3.0. Moreover, you will
understand the basic principles of Spring MVC, which will serve as the foundation for more advanced topics
covered in the upcoming chapters.